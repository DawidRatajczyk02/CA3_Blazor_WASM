@page "/"
@inject YouTubeService YouTubeService
@inject NavigationManager NavigationManager
@using YouTubeBlazorApp.Models
@using YouTubeBlazorApp.Services

<!-- HTML Page Layout -->
<h3 class="text-center">Search YouTube Videos</h3>
<div class="d-flex justify-content-center mb-4">
    <input @bind="searchQuery" placeholder="Search..." class="form-control w-50" />
    <button @onclick="() => Search()" class="btn btn-primary ml-2">Search</button>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger text-center">@errorMessage</p>
}

@if (results?.Items == null || results.Items.Count == 0)
{
    <p class="text-center">No results found.</p>
}
else
{
    <div class="container">
        <div class="row">
            @foreach (var item in results.Items)
            {
                <div class="col-md-4 mb-4">
                    <div class="card shadow-sm">

                        <!-- Video Thumbnail Section -->
                        <img class="card-img-top" src="@item.Snippet?.Thumbnails?.High?.Url" alt="@item.Snippet?.Title" />
                        <div class="card-body">

                            <!-- Video Details -->
                            <h5 class="card-title">@item.Snippet?.Title</h5>
                            <p class="card-text">@item.Snippet?.Description</p>

                            <!-- View Details Button -->
                            <a href="/video/@item.Id.VideoId" class="btn btn-primary">
                                View Details
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="d-flex justify-content-center align-items-center mt-4">
            <!-- Previous Button -->
            <button class="btn btn-secondary me-2" @onclick="PreviousPage" disabled="@(currentPage <= 1)">
                Previous
            </button>

            <!-- Page Numbers -->
            @for (int i = 1; i <= totalPages; i++)
            {
                <span class="btn @(i == currentPage ? "btn-primary" : "btn-outline-primary") mx-1">
                    @i
                </span>
            }

            <!-- Next Button -->
            <button class="btn btn-primary ms-2" @onclick="NextPage" disabled="@(currentPage >= totalPages)">
                Next
            </button>
        </div>
    </div>
}

<!-- Code -->
@code {
    private string? nextPageToken;
    private string? previousPageToken;
    private int currentPage = 1;
    private int totalPages = 6;
    private Dictionary<int, string?> pageTokens = new();
    private YouTubeSearchResponse? results;
    private string searchQuery = string.Empty;
    private string errorMessage = string.Empty;

    // Executes search
    private async Task Search(string? pageToken = null)
    {
        // Input validation: Check if searchQuery is empty or whitespace
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            errorMessage = "Search query cannot be empty.";
            return;
        }

        try
        {
            // Reset pagination when a new search is performed
            if (pageToken == null)
            {
                currentPage = 1;
                pageTokens.Clear();
            }

            // Perform API call to search videos and update results
            var response = await YouTubeService.SearchVideosAsync(searchQuery, pageToken);
            UpdateResults(response);
        }
        catch
        {
            // Handle any errors
            errorMessage = "An error occurred while fetching results.";
        }
    }

    // Navigate to the next page
    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            Console.WriteLine($"Navigating to next page: {currentPage}"); // Debug log
            var response = await YouTubeService.SearchVideosAsync(searchQuery, nextPageToken);
            UpdateResults(response);
        }
    }

    // Navigate to the previous page
    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            var response = await YouTubeService.SearchVideosAsync(searchQuery, previousPageToken);
            UpdateResults(response);
        }
    }

    // Update results
    private void UpdateResults(YouTubeSearchResponse response)
    {
        results = response;
        nextPageToken = response.NextPageToken;
        previousPageToken = response.PrevPageToken;

        if (!pageTokens.ContainsKey(currentPage))
        {
            pageTokens[currentPage] = nextPageToken;
        }
    }
}


